
LecturaDeEntradas.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000134  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000e0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000134  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000164  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000069c  00000000  00000000  000001cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000061b  00000000  00000000  00000868  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000023a  00000000  00000000  00000e83  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000010c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a0  00000000  00000000  000010f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000018  00000000  00000000  00001494  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 59 00 	call	0xb2	; 0xb2 <main>
  78:	0c 94 6e 00 	jmp	0xdc	; 0xdc <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <ports_init>:

void ports_init(void)
{
//--Definir Entradas y Salidas
//-Inputs
	BTN_DDRX &= ~(1<<BTN_0);// solo PORTD4 es una entrada
  80:	8a b1       	in	r24, 0x0a	; 10
  82:	8f 7e       	andi	r24, 0xEF	; 239
  84:	8a b9       	out	0x0a, r24	; 10
	BTN_DDRX &= ~(1<<BTN_1);// solo PORTD4 es una entrada
  86:	8a b1       	in	r24, 0x0a	; 10
  88:	87 7f       	andi	r24, 0xF7	; 247
  8a:	8a b9       	out	0x0a, r24	; 10
	
//-Outputs
	LED_DDRX |=  (1<<LED_0);// solo PORTB4 es una salida
  8c:	84 b1       	in	r24, 0x04	; 4
  8e:	80 61       	ori	r24, 0x10	; 16
  90:	84 b9       	out	0x04, r24	; 4
	LED_DDRX |=  (1<<LED_1);// solo PORTB4 es una salida
  92:	84 b1       	in	r24, 0x04	; 4
  94:	88 60       	ori	r24, 0x08	; 8
  96:	84 b9       	out	0x04, r24	; 4
	
//--Init Entradas y Salidas
//-Inputs
	BTN_PORTX &= ~(1<<BTN_0);//Pull-down
  98:	8b b1       	in	r24, 0x0b	; 11
  9a:	8f 7e       	andi	r24, 0xEF	; 239
  9c:	8b b9       	out	0x0b, r24	; 11
	BTN_PORTX &= ~(1<<BTN_1);//Pull-down
  9e:	8b b1       	in	r24, 0x0b	; 11
  a0:	87 7f       	andi	r24, 0xF7	; 247
  a2:	8b b9       	out	0x0b, r24	; 11

//-Outputs
	LED_PORTX &= ~(1<<LED_0);//Output Low (Sink)
  a4:	85 b1       	in	r24, 0x05	; 5
  a6:	8f 7e       	andi	r24, 0xEF	; 239
  a8:	85 b9       	out	0x05, r24	; 5
	LED_PORTX &= ~(1<<LED_1);//Output Low (Sink)
  aa:	85 b1       	in	r24, 0x05	; 5
  ac:	87 7f       	andi	r24, 0xF7	; 247
  ae:	85 b9       	out	0x05, r24	; 5
  b0:	08 95       	ret

000000b2 <main>:

// ------- MAIN -------- //
int main(void)
{
// -------- Inits --------- //	
    ports_init();//llama a la funcion
  b2:	0e 94 40 00 	call	0x80	; 0x80 <ports_init>
    {
	//0b00000001 = 0b00000001
//0bXXXXXXXX & 0b00000001 = 0b0000000X
//0bXXXXXXX0 & 0b00000001 = 0b00000000
//0bXXXXXXX1 & 0b00000001 = 0b00000001
		if(BTN_PINX & 0b00010000)
  b6:	4c 9b       	sbis	0x09, 4	; 9
  b8:	04 c0       	rjmp	.+8      	; 0xc2 <main+0x10>
		{
			LED_PORTX |= 0b00010000;//Enciendo LED_0
  ba:	85 b1       	in	r24, 0x05	; 5
  bc:	80 61       	ori	r24, 0x10	; 16
  be:	85 b9       	out	0x05, r24	; 5
  c0:	03 c0       	rjmp	.+6      	; 0xc8 <main+0x16>
		}
		else
		{
			LED_PORTX &= ~(1<<LED_0);//Apago LED_0
  c2:	85 b1       	in	r24, 0x05	; 5
  c4:	8f 7e       	andi	r24, 0xEF	; 239
  c6:	85 b9       	out	0x05, r24	; 5
		}
		if(BTN_PINX & (1<<BTN_1))//BTN_1 es uno
  c8:	4b 9b       	sbis	0x09, 3	; 9
  ca:	04 c0       	rjmp	.+8      	; 0xd4 <main+0x22>
		{
			LED_PORTX |= (1<<LED_1);
  cc:	85 b1       	in	r24, 0x05	; 5
  ce:	88 60       	ori	r24, 0x08	; 8
  d0:	85 b9       	out	0x05, r24	; 5
  d2:	f1 cf       	rjmp	.-30     	; 0xb6 <main+0x4>
		}
		else
		{
			LED_PORTX &= ~(1<<LED_1);
  d4:	85 b1       	in	r24, 0x05	; 5
  d6:	87 7f       	andi	r24, 0xF7	; 247
  d8:	85 b9       	out	0x05, r24	; 5
  da:	ed cf       	rjmp	.-38     	; 0xb6 <main+0x4>

000000dc <_exit>:
  dc:	f8 94       	cli

000000de <__stop_program>:
  de:	ff cf       	rjmp	.-2      	; 0xde <__stop_program>
