
LecturaDeEntradas.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000114  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000c0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000114  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000144  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000184  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000069c  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000061b  00000000  00000000  00000848  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000021f  00000000  00000000  00000e63  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001084  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000039d  00000000  00000000  000010b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000018  00000000  00000000  00001455  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 59 00 	call	0xb2	; 0xb2 <main>
  78:	0c 94 5e 00 	jmp	0xbc	; 0xbc <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <ports_init>:

void ports_init(void)
{
//--Definir Entradas y Salidas
//-Inputs (colocar 0)
	DDRD  = DDRD & ~(1<<PORTD4);// solo PORTD4 es una entrada
  80:	8a b1       	in	r24, 0x0a	; 10
  82:	8f 7e       	andi	r24, 0xEF	; 239
  84:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~(1<<PORTD3);// solo PORTD3 es una entrada
  86:	8a b1       	in	r24, 0x0a	; 10
  88:	87 7f       	andi	r24, 0xF7	; 247
  8a:	8a b9       	out	0x0a, r24	; 10
	
//-Outputs (colocar 1)
	DDRB  = DDRB |  (1<<PORTB4);// solo PORTB4 es una salida
  8c:	84 b1       	in	r24, 0x04	; 4
  8e:	80 61       	ori	r24, 0x10	; 16
  90:	84 b9       	out	0x04, r24	; 4
	DDRB |=  (1<<PORTB3);// solo PORTB4 es una salida
  92:	84 b1       	in	r24, 0x04	; 4
  94:	88 60       	ori	r24, 0x08	; 8
  96:	84 b9       	out	0x04, r24	; 4
	
//--Init Entradas y Salidas
//-Inputs
	PORTD &= ~(1<<PORTD4);//Pull-down
  98:	8b b1       	in	r24, 0x0b	; 11
  9a:	8f 7e       	andi	r24, 0xEF	; 239
  9c:	8b b9       	out	0x0b, r24	; 11
	PORTD |=  (1<<PORTD3);//Pull-up
  9e:	8b b1       	in	r24, 0x0b	; 11
  a0:	88 60       	ori	r24, 0x08	; 8
  a2:	8b b9       	out	0x0b, r24	; 11

//-Outputs
	PORTB &= ~(1<<PORTB4);//Output Low (Sink)
  a4:	85 b1       	in	r24, 0x05	; 5
  a6:	8f 7e       	andi	r24, 0xEF	; 239
  a8:	85 b9       	out	0x05, r24	; 5
	PORTB &= ~(1<<PORTB3);//Output Low (Sink)
  aa:	85 b1       	in	r24, 0x05	; 5
  ac:	87 7f       	andi	r24, 0xF7	; 247
  ae:	85 b9       	out	0x05, r24	; 5
  b0:	08 95       	ret

000000b2 <main>:

// ------- MAIN -------- //
int main(void)
{
// -------- Inits --------- //	
    ports_init();//llama a la funcion
  b2:	0e 94 40 00 	call	0x80	; 0x80 <ports_init>
	
// ------ Event loop ------ //
    while (1) 
    {
 //0b00000100 = 0b00000100
		PORTB = PIND;
  b6:	89 b1       	in	r24, 0x09	; 9
  b8:	85 b9       	out	0x05, r24	; 5
  ba:	fd cf       	rjmp	.-6      	; 0xb6 <main+0x4>

000000bc <_exit>:
  bc:	f8 94       	cli

000000be <__stop_program>:
  be:	ff cf       	rjmp	.-2      	; 0xbe <__stop_program>
